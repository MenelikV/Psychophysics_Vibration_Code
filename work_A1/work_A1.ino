#include <Wire.h> // library which enables I2C
#include <DueTimer.h> // Arduino Due timer


// I2C communication information
int f1;  // frequency of the first stimulus 
float amp1;   // amplitude of the first stimulus
int f2;  // frequency of the second stimulus
float amp2;   // amplitude of the second stimulus
int wave;   // waveform
int x;
int duration1, duration2; //duration of stimuli
int pause_t = 0;

int f_new;
int num_samples = 1000;
int i = 0;
int j = 0;
int data[20];

double reset_voltage = 0;

bool received_data;

// table of data send by Matlab through the first arduino
const uint16_t sinTable[] = {0xBFF,0xC06,0xC0C,0xC13,0xC19,0xC1F,0xC26,0xC2C,0xC33,0xC39,0xC40,0xC46,0xC4C,0xC53,0xC59,0xC60,0xC66,0xC6D,0xC73,0xC79,0xC80,0xC86,0xC8C,0xC93,0xC99,0xCA0,0xCA6,0xCAC,0xCB3,0xCB9,0xCBF,0xCC6,0xCCC,0xCD2,0xCD9,0xCDF,0xCE5,0xCEB,0xCF2,0xCF8,0xCFE,0xD04,0xD0B,0xD11,0xD17,0xD1D,0xD23,0xD29,0xD30,0xD36,0xD3C,0xD42,0xD48,0xD4E,0xD54,0xD5A,0xD60,0xD66,0xD6C,0xD72,0xD78,0xD7E,0xD84,0xD8A,0xD90,0xD96,0xD9C,0xDA2,0xDA8,0xDAE,0xDB4,0xDB9,0xDBF,0xDC5,0xDCB,0xDD0,0xDD6,0xDDC,0xDE2,0xDE7,0xDED,0xDF3,0xDF8,0xDFE,0xE03,0xE09,0xE0E,0xE14,0xE19,0xE1F,0xE24,0xE2A,0xE2F,0xE34,0xE3A,0xE3F,0xE45,0xE4A,0xE4F,0xE54,0xE5A,0xE5F,0xE64,0xE69,0xE6E,0xE73,0xE78,0xE7D,0xE82,0xE87,0xE8C,0xE91,0xE96,0xE9B,0xEA0,0xEA5,0xEAA,0xEAE,0xEB3,0xEB8,0xEBD,0xEC1,0xEC6,0xECB,0xECF,0xED4,0xED8,0xEDD,0xEE1,0xEE6,0xEEA,0xEEE,0xEF3,0xEF7,0xEFB,0xF00,0xF04,0xF08,0xF0C,0xF11,0xF15,0xF19,0xF1D,0xF21,0xF25,0xF29,0xF2D,0xF31,0xF34,0xF38,0xF3C,0xF40,0xF44,0xF47,0xF4B,0xF4F,0xF52,0xF56,0xF59,0xF5D,0xF60,0xF64,0xF67,0xF6A,0xF6E,0xF71,0xF74,0xF77,0xF7B,0xF7E,0xF81,0xF84,0xF87,0xF8A,0xF8D,0xF90,0xF93,0xF96,0xF99,0xF9B,0xF9E,0xFA1,0xFA3,0xFA6,0xFA9,0xFAB,0xFAE,0xFB0,0xFB3,0xFB5,0xFB8,0xFBA,0xFBC,0xFBE,0xFC1,0xFC3,0xFC5,0xFC7,0xFC9,0xFCB,0xFCD,0xFCF,0xFD1,0xFD3,0xFD5,0xFD7,0xFD8,0xFDA,0xFDC,0xFDE,0xFDF,0xFE1,0xFE2,0xFE4,0xFE5,0xFE7,0xFE8,0xFE9,0xFEB,0xFEC,0xFED,0xFEE,0xFEF,0xFF1,0xFF2,0xFF3,0xFF4,0xFF5,0xFF5,0xFF6,0xFF7,0xFF8,0xFF9,0xFF9,0xFFA,0xFFB,0xFFB,0xFFC,0xFFC,0xFFD,0xFFD,0xFFD,0xFFE,0xFFE,0xFFE,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFE,0xFFE,0xFFE,0xFFE,0xFFD,0xFFD,0xFFC,0xFFC,0xFFB,0xFFB,0xFFA,0xFFA,0xFF9,0xFF8,0xFF8,0xFF7,0xFF6,0xFF5,0xFF4,0xFF3,0xFF2,0xFF1,0xFF0,0xFEF,0xFEE,0xFED,0xFEB,0xFEA,0xFE9,0xFE7,0xFE6,0xFE5,0xFE3,0xFE2,0xFE0,0xFDE,0xFDD,0xFDB,0xFD9,0xFD8,0xFD6,0xFD4,0xFD2,0xFD0,0xFCE,0xFCC,0xFCA,0xFC8,0xFC6,0xFC4,0xFC2,0xFC0,0xFBD,0xFBB,0xFB9,0xFB6,0xFB4,0xFB2,0xFAF,0xFAD,0xFAA,0xFA7,0xFA5,0xFA2,0xF9F,0xF9D,0xF9A,0xF97,0xF94,0xF91,0xF8E,0xF8C,0xF89,0xF86,0xF82,0xF7F,0xF7C,0xF79,0xF76,0xF73,0xF6F,0xF6C,0xF69,0xF65,0xF62,0xF5E,0xF5B,0xF57,0xF54,0xF50,0xF4D,0xF49,0xF45,0xF42,0xF3E,0xF3A,0xF36,0xF32,0xF2F,0xF2B,0xF27,0xF23,0xF1F,0xF1B,0xF17,0xF13,0xF0E,0xF0A,0xF06,0xF02,0xEFE,0xEF9,0xEF5,0xEF1,0xEEC,0xEE8,0xEE3,0xEDF,0xEDB,0xED6,0xED1,0xECD,0xEC8,0xEC4,0xEBF,0xEBA,0xEB6,0xEB1,0xEAC,0xEA7,0xEA2,0xE9E,0xE99,0xE94,0xE8F,0xE8A,0xE85,0xE80,0xE7B,0xE76,0xE71,0xE6C,0xE66,0xE61,0xE5C,0xE57,0xE52,0xE4C,0xE47,0xE42,0xE3D,0xE37,0xE32,0xE2C,0xE27,0xE22,0xE1C,0xE17,0xE11,0xE0C,0xE06,0xE01,0xDFB,0xDF5,0xDF0,0xDEA,0xDE4,0xDDF,0xDD9,0xDD3,0xDCE,0xDC8,0xDC2,0xDBC,0xDB6,0xDB1,0xDAB,0xDA5,0xD9F,0xD99,0xD93,0xD8D,0xD87,0xD81,0xD7B,0xD75,0xD6F,0xD69,0xD63,0xD5D,0xD57,0xD51,0xD4B,0xD45,0xD3F,0xD39,0xD33,0xD2D,0xD26,0xD20,0xD1A,0xD14,0xD0E,0xD07,0xD01,0xCFB,0xCF5,0xCEE,0xCE8,0xCE2,0xCDC,0xCD5,0xCCF,0xCC9,0xCC2,0xCBC,0xCB6,0xCAF,0xCA9,0xCA3,0xC9C,0xC96,0xC90,0xC89,0xC83,0xC7C,0xC76,0xC70,0xC69,0xC63,0xC5C,0xC56,0xC50,0xC49,0xC43,0xC3C,0xC36,0xC30,0xC29,0xC23,0xC1C,0xC16,0xC0F,0xC09,0xC02,0x3FD,0x3F6,0x3F0,0x3E9,0x3E3,0x3DC,0x3D6,0x3CF,0x3C9,0x3C3,0x3BC,0x3B6,0x3AF,0x3A9,0x3A3,0x39C,0x396,0x38F,0x389,0x383,0x37C,0x376,0x36F,0x369,0x363,0x35C,0x356,0x350,0x349,0x343,0x33D,0x336,0x330,0x32A,0x323,0x31D,0x317,0x311,0x30A,0x304,0x2FE,0x2F8,0x2F1,0x2EB,0x2E5,0x2DF,0x2D9,0x2D2,0x2CC,0x2C6,0x2C0,0x2BA,0x2B4,0x2AE,0x2A8,0x2A2,0x29C,0x296,0x290,0x28A,0x284,0x27E,0x278,0x272,0x26C,0x266,0x260,0x25A,0x254,0x24E,0x249,0x243,0x23D,0x237,0x231,0x22C,0x226,0x220,0x21B,0x215,0x20F,0x20A,0x204,0x1FE,0x1F9,0x1F3,0x1EE,0x1E8,0x1E3,0x1DD,0x1D8,0x1D3,0x1CD,0x1C8,0x1C2,0x1BD,0x1B8,0x1B3,0x1AD,0x1A8,0x1A3,0x19E,0x199,0x193,0x18E,0x189,0x184,0x17F,0x17A,0x175,0x170,0x16B,0x166,0x161,0x15D,0x158,0x153,0x14E,0x149,0x145,0x140,0x13B,0x137,0x132,0x12E,0x129,0x124,0x120,0x11C,0x117,0x113,0x10E,0x10A,0x106,0x101,0x0FD,0x0F9,0x0F5,0x0F1,0x0EC,0x0E8,0x0E4,0x0E0,0x0DC,0x0D8,0x0D4,0x0D0,0x0CD,0x0C9,0x0C5,0x0C1,0x0BD,0x0BA,0x0B6,0x0B2,0x0AF,0x0AB,0x0A8,0x0A4,0x0A1,0x09D,0x09A,0x096,0x093,0x090,0x08C,0x089,0x086,0x083,0x080,0x07D,0x079,0x076,0x073,0x071,0x06E,0x06B,0x068,0x065,0x062,0x060,0x05D,0x05A,0x058,0x055,0x052,0x050,0x04D,0x04B,0x049,0x046,0x044,0x042,0x03F,0x03D,0x03B,0x039,0x037,0x035,0x033,0x031,0x02F,0x02D,0x02B,0x029,0x027,0x026,0x024,0x022,0x021,0x01F,0x01D,0x01C,0x01A,0x019,0x018,0x016,0x015,0x014,0x012,0x011,0x010,0x00F,0x00E,0x00D,0x00C,0x00B,0x00A,0x009,0x008,0x007,0x007,0x006,0x005,0x005,0x004,0x004,0x003,0x003,0x002,0x002,0x001,0x001,0x001,0x001,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x001,0x001,0x001,0x002,0x002,0x002,0x003,0x003,0x004,0x004,0x005,0x006,0x006,0x007,0x008,0x009,0x00A,0x00A,0x00B,0x00C,0x00D,0x00E,0x010,0x011,0x012,0x013,0x014,0x016,0x017,0x018,0x01A,0x01B,0x01D,0x01E,0x020,0x021,0x023,0x025,0x027,0x028,0x02A,0x02C,0x02E,0x030,0x032,0x034,0x036,0x038,0x03A,0x03C,0x03E,0x041,0x043,0x045,0x047,0x04A,0x04C,0x04F,0x051,0x054,0x056,0x059,0x05C,0x05E,0x061,0x064,0x066,0x069,0x06C,0x06F,0x072,0x075,0x078,0x07B,0x07E,0x081,0x084,0x088,0x08B,0x08E,0x091,0x095,0x098,0x09B,0x09F,0x0A2,0x0A6,0x0A9,0x0AD,0x0B0,0x0B4,0x0B8,0x0BB,0x0BF,0x0C3,0x0C7,0x0CB,0x0CE,0x0D2,0x0D6,0x0DA,0x0DE,0x0E2,0x0E6,0x0EA,0x0EE,0x0F3,0x0F7,0x0FB,0x0FF,0x104,0x108,0x10C,0x111,0x115,0x119,0x11E,0x122,0x127,0x12B,0x130,0x134,0x139,0x13E,0x142,0x147,0x14C,0x151,0x155,0x15A,0x15F,0x164,0x169,0x16E,0x173,0x178,0x17D,0x182,0x187,0x18C,0x191,0x196,0x19B,0x1A0,0x1A5,0x1AB,0x1B0,0x1B5,0x1BA,0x1C0,0x1C5,0x1CB,0x1D0,0x1D5,0x1DB,0x1E0,0x1E6,0x1EB,0x1F1,0x1F6,0x1FC,0x201,0x207,0x20C,0x212,0x218,0x21D,0x223,0x229,0x22F,0x234,0x23A,0x240,0x246,0x24B,0x251,0x257,0x25D,0x263,0x269,0x26F,0x275,0x27B,0x281,0x287,0x28D,0x293,0x299,0x29F,0x2A5,0x2AB,0x2B1,0x2B7,0x2BD,0x2C3,0x2C9,0x2CF,0x2D6,0x2DC,0x2E2,0x2E8,0x2EE,0x2F4,0x2FB,0x301,0x307,0x30D,0x314,0x31A,0x320,0x326,0x32D,0x333,0x339,0x340,0x346,0x34C,0x353,0x359,0x35F,0x366,0x36C,0x373,0x379,0x37F,0x386,0x38C,0x392,0x399,0x39F,0x3A6,0x3AC,0x3B3,0x3B9,0x3BF,0x3C6,0x3CC,0x3D3,0x3D9,0x3E0,0x3E6,0x3EC,0x3F3,0x3F9,0x400,
};
void sine1(){
analogWrite(DAC1, sinTable[i]*amp1);
i = (i+f_new)%num_samples;
}
  
void sine2(){
analogWrite(DAC1, sinTable[j]*amp2);
j = (j+f_new)%num_samples;
}

void reset() {
analogWrite(DAC0, 0x806);
analogWrite(DAC1, 0x806);
 }

// Setup of communication
void setup(){
  analogWriteResolution(12);
  analogReadResolution(12);
  Serial.begin(57600);
  Timer1.attachInterrupt(sine1).setFrequency(num_samples);  // max frequency is around 140.000 samples per second
  Timer2.attachInterrupt(sine2).setFrequency(num_samples);
  received_data = false;
}

// sine wave generation in which the loop
//is called with a timer due frequency and i is counted up.
void loop() {

  delay(100);

  f_new = 25;
  amp1 = 0.8;
  pause_t = 3000000;
  duration1 = 1000000;
  duration2 = 1000000;
  
  Serial.println(f_new);
  
  Timer1.start();
  delayMicroseconds(duration1);
  Serial.println("Timer1");
  Timer1.stop();

  delayMicroseconds(pause_t);
  
  f_new = 40;
  amp2 = 0.4;
  Timer2.start();
  delayMicroseconds(duration2);
  Serial.println("Timer2");
  Timer2.stop();
  

  delayMicroseconds(pause_t);
  




}

