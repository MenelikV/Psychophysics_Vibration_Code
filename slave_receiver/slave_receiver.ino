#include <Wire.h>
#include <DueTimer.h> // Arduino Due timer


// I2C communication information
int f1;  // frequency of the first stimulus 
float amp1;   // amplitude of the first stimulus
int f2;  // frequency of the second stimulus
float amp2;   // amplitude of the second stimulus
int wave;   // waveform
int x;

int f_new;
int num_samples = 1000;
int i = 0;
int j = 0;
int k = 0;
int duration, pause_t;
char data[50];
int indices[6];
String test;
String f_new_s, amp1_s, amp2_s, duration_s, pause_t_s;


bool received_data = false;


// table of data send by Matlab through the first arduino
const uint16_t sinTable[] = {0x800,0x80C,0x819,0x826,0x833,0x840,0x84D,0x85A,0x866,0x873,0x880,0x88D,0x89A,0x8A7,0x8B4,0x8C0,0x8CD,0x8DA,0x8E7,0x8F4,0x900,0x90D,0x91A,0x927,0x933,0x940,0x94D,0x95A,0x966,0x973,0x980,0x98C,0x999,0x9A5,0x9B2,0x9BF,0x9CB,0x9D8,0x9E4,0x9F1,0x9FD,0xA0A,0xA16,0xA23,0xA2F,0xA3B,0xA48,0xA54,0xA60,0xA6D,0xA79,0xA85,0xA91,0xA9D,0xAAA,0xAB6,0xAC2,0xACE,0xADA,0xAE6,0xAF2,0xAFE,0xB0A,0xB16,0xB22,0xB2D,0xB39,0xB45,0xB51,0xB5C,0xB68,0xB74,0xB7F,0xB8B,0xB96,0xBA2,0xBAD,0xBB9,0xBC4,0xBCF,0xBDB,0xBE6,0xBF1,0xBFC,0xC08,0xC13,0xC1E,0xC29,0xC34,0xC3F,0xC4A,0xC54,0xC5F,0xC6A,0xC75,0xC7F,0xC8A,0xC95,0xC9F,0xCAA,0xCB4,0xCBE,0xCC9,0xCD3,0xCDD,0xCE7,0xCF2,0xCFC,0xD06,0xD10,0xD1A,0xD24,0xD2D,0xD37,0xD41,0xD4B,0xD54,0xD5E,0xD67,0xD71,0xD7A,0xD84,0xD8D,0xD96,0xD9F,0xDA8,0xDB2,0xDBB,0xDC3,0xDCC,0xDD5,0xDDE,0xDE7,0xDEF,0xDF8,0xE01,0xE09,0xE11,0xE1A,0xE22,0xE2A,0xE32,0xE3B,0xE43,0xE4B,0xE52,0xE5A,0xE62,0xE6A,0xE72,0xE79,0xE81,0xE88,0xE8F,0xE97,0xE9E,0xEA5,0xEAC,0xEB3,0xEBA,0xEC1,0xEC8,0xECF,0xED6,0xEDC,0xEE3,0xEE9,0xEF0,0xEF6,0xEFD,0xF03,0xF09,0xF0F,0xF15,0xF1B,0xF21,0xF27,0xF2C,0xF32,0xF38,0xF3D,0xF43,0xF48,0xF4D,0xF52,0xF58,0xF5D,0xF62,0xF67,0xF6B,0xF70,0xF75,0xF79,0xF7E,0xF82,0xF87,0xF8B,0xF8F,0xF94,0xF98,0xF9C,0xFA0,0xFA3,0xFA7,0xFAB,0xFAE,0xFB2,0xFB5,0xFB9,0xFBC,0xFBF,0xFC2,0xFC6,0xFC9,0xFCB,0xFCE,0xFD1,0xFD4,0xFD6,0xFD9,0xFDB,0xFDE,0xFE0,0xFE2,0xFE4,0xFE6,0xFE8,0xFEA,0xFEC,0xFEE,0xFEF,0xFF1,0xFF2,0xFF4,0xFF5,0xFF6,0xFF7,0xFF8,0xFF9,0xFFA,0xFFB,0xFFC,0xFFD,0xFFD,0xFFE,0xFFE,0xFFE,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFF,0xFFE,0xFFE,0xFFD,0xFFD,0xFFC,0xFFC,0xFFB,0xFFA,0xFF9,0xFF8,0xFF7,0xFF6,0xFF4,0xFF3,0xFF2,0xFF0,0xFEE,0xFED,0xFEB,0xFE9,0xFE7,0xFE5,0xFE3,0xFE1,0xFDF,0xFDC,0xFDA,0xFD8,0xFD5,0xFD2,0xFD0,0xFCD,0xFCA,0xFC7,0xFC4,0xFC1,0xFBE,0xFBA,0xFB7,0xFB4,0xFB0,0xFAD,0xFA9,0xFA5,0xFA1,0xF9E,0xF9A,0xF96,0xF91,0xF8D,0xF89,0xF85,0xF80,0xF7C,0xF77,0xF72,0xF6E,0xF69,0xF64,0xF5F,0xF5A,0xF55,0xF50,0xF4B,0xF45,0xF40,0xF3A,0xF35,0xF2F,0xF2A,0xF24,0xF1E,0xF18,0xF12,0xF0C,0xF06,0xF00,0xEF9,0xEF3,0xEED,0xEE6,0xEE0,0xED9,0xED2,0xECC,0xEC5,0xEBE,0xEB7,0xEB0,0xEA9,0xEA2,0xE9A,0xE93,0xE8C,0xE84,0xE7D,0xE75,0xE6E,0xE66,0xE5E,0xE56,0xE4F,0xE47,0xE3F,0xE37,0xE2E,0xE26,0xE1E,0xE16,0xE0D,0xE05,0xDFC,0xDF4,0xDEB,0xDE2,0xDDA,0xDD1,0xDC8,0xDBF,0xDB6,0xDAD,0xDA4,0xD9B,0xD92,0xD88,0xD7F,0xD76,0xD6C,0xD63,0xD59,0xD4F,0xD46,0xD3C,0xD32,0xD29,0xD1F,0xD15,0xD0B,0xD01,0xCF7,0xCED,0xCE2,0xCD8,0xCCE,0xCC4,0xCB9,0xCAF,0xCA4,0xC9A,0xC8F,0xC85,0xC7A,0xC6F,0xC65,0xC5A,0xC4F,0xC44,0xC39,0xC2E,0xC23,0xC18,0xC0D,0xC02,0xBF7,0xBEC,0xBE0,0xBD5,0xBCA,0xBBE,0xBB3,0xBA8,0xB9C,0xB91,0xB85,0xB7A,0xB6E,0xB62,0xB57,0xB4B,0xB3F,0xB33,0xB28,0xB1C,0xB10,0xB04,0xAF8,0xAEC,0xAE0,0xAD4,0xAC8,0xABC,0xAB0,0xAA4,0xA97,0xA8B,0xA7F,0xA73,0xA66,0xA5A,0xA4E,0xA41,0xA35,0xA29,0xA1C,0xA10,0xA03,0x9F7,0x9EA,0x9DE,0x9D1,0x9C5,0x9B8,0x9AC,0x99F,0x992,0x986,0x979,0x96D,0x960,0x953,0x946,0x93A,0x92D,0x920,0x914,0x907,0x8FA,0x8ED,0x8E0,0x8D4,0x8C7,0x8BA,0x8AD,0x8A0,0x893,0x887,0x87A,0x86D,0x860,0x853,0x846,0x839,0x82D,0x820,0x813,0x806,0x7F9,0x7EC,0x7DF,0x7D2,0x7C6,0x7B9,0x7AC,0x79F,0x792,0x785,0x778,0x76C,0x75F,0x752,0x745,0x738,0x72B,0x71F,0x712,0x705,0x6F8,0x6EB,0x6DF,0x6D2,0x6C5,0x6B9,0x6AC,0x69F,0x692,0x686,0x679,0x66D,0x660,0x653,0x647,0x63A,0x62E,0x621,0x615,0x608,0x5FC,0x5EF,0x5E3,0x5D6,0x5CA,0x5BE,0x5B1,0x5A5,0x599,0x58C,0x580,0x574,0x568,0x55B,0x54F,0x543,0x537,0x52B,0x51F,0x513,0x507,0x4FB,0x4EF,0x4E3,0x4D7,0x4CC,0x4C0,0x4B4,0x4A8,0x49D,0x491,0x485,0x47A,0x46E,0x463,0x457,0x44C,0x441,0x435,0x42A,0x41F,0x413,0x408,0x3FD,0x3F2,0x3E7,0x3DC,0x3D1,0x3C6,0x3BB,0x3B0,0x3A5,0x39A,0x390,0x385,0x37A,0x370,0x365,0x35B,0x350,0x346,0x33B,0x331,0x327,0x31D,0x312,0x308,0x2FE,0x2F4,0x2EA,0x2E0,0x2D6,0x2CD,0x2C3,0x2B9,0x2B0,0x2A6,0x29C,0x293,0x289,0x280,0x277,0x26D,0x264,0x25B,0x252,0x249,0x240,0x237,0x22E,0x225,0x21D,0x214,0x20B,0x203,0x1FA,0x1F2,0x1E9,0x1E1,0x1D9,0x1D1,0x1C8,0x1C0,0x1B8,0x1B0,0x1A9,0x1A1,0x199,0x191,0x18A,0x182,0x17B,0x173,0x16C,0x165,0x15D,0x156,0x14F,0x148,0x141,0x13A,0x133,0x12D,0x126,0x11F,0x119,0x112,0x10C,0x106,0x0FF,0x0F9,0x0F3,0x0ED,0x0E7,0x0E1,0x0DB,0x0D5,0x0D0,0x0CA,0x0C5,0x0BF,0x0BA,0x0B4,0x0AF,0x0AA,0x0A5,0x0A0,0x09B,0x096,0x091,0x08D,0x088,0x083,0x07F,0x07A,0x076,0x072,0x06E,0x069,0x065,0x061,0x05E,0x05A,0x056,0x052,0x04F,0x04B,0x048,0x045,0x041,0x03E,0x03B,0x038,0x035,0x032,0x02F,0x02D,0x02A,0x027,0x025,0x023,0x020,0x01E,0x01C,0x01A,0x018,0x016,0x014,0x012,0x011,0x00F,0x00D,0x00C,0x00B,0x009,0x008,0x007,0x006,0x005,0x004,0x003,0x003,0x002,0x002,0x001,0x001,0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x001,0x001,0x001,0x002,0x002,0x003,0x004,0x005,0x006,0x007,0x008,0x009,0x00A,0x00B,0x00D,0x00E,0x010,0x011,0x013,0x015,0x017,0x019,0x01B,0x01D,0x01F,0x021,0x024,0x026,0x029,0x02B,0x02E,0x031,0x034,0x036,0x039,0x03D,0x040,0x043,0x046,0x04A,0x04D,0x051,0x054,0x058,0x05C,0x05F,0x063,0x067,0x06B,0x070,0x074,0x078,0x07D,0x081,0x086,0x08A,0x08F,0x094,0x098,0x09D,0x0A2,0x0A7,0x0AD,0x0B2,0x0B7,0x0BC,0x0C2,0x0C7,0x0CD,0x0D3,0x0D8,0x0DE,0x0E4,0x0EA,0x0F0,0x0F6,0x0FC,0x102,0x109,0x10F,0x116,0x11C,0x123,0x129,0x130,0x137,0x13E,0x145,0x14C,0x153,0x15A,0x161,0x168,0x170,0x177,0x17E,0x186,0x18D,0x195,0x19D,0x1A5,0x1AD,0x1B4,0x1BC,0x1C4,0x1CD,0x1D5,0x1DD,0x1E5,0x1EE,0x1F6,0x1FE,0x207,0x210,0x218,0x221,0x22A,0x233,0x23C,0x244,0x24D,0x257,0x260,0x269,0x272,0x27B,0x285,0x28E,0x298,0x2A1,0x2AB,0x2B4,0x2BE,0x2C8,0x2D2,0x2DB,0x2E5,0x2EF,0x2F9,0x303,0x30D,0x318,0x322,0x32C,0x336,0x341,0x34B,0x355,0x360,0x36A,0x375,0x380,0x38A,0x395,0x3A0,0x3AB,0x3B5,0x3C0,0x3CB,0x3D6,0x3E1,0x3EC,0x3F7,0x403,0x40E,0x419,0x424,0x430,0x43B,0x446,0x452,0x45D,0x469,0x474,0x480,0x48B,0x497,0x4A3,0x4AE,0x4BA,0x4C6,0x4D2,0x4DD,0x4E9,0x4F5,0x501,0x50D,0x519,0x525,0x531,0x53D,0x549,0x555,0x562,0x56E,0x57A,0x586,0x592,0x59F,0x5AB,0x5B7,0x5C4,0x5D0,0x5DC,0x5E9,0x5F5,0x602,0x60E,0x61B,0x627,0x634,0x640,0x64D,0x65A,0x666,0x673,0x67F,0x68C,0x699,0x6A5,0x6B2,0x6BF,0x6CC,0x6D8,0x6E5,0x6F2,0x6FF,0x70B,0x718,0x725,0x732,0x73F,0x74B,0x758,0x765,0x772,0x77F,0x78C,0x799,0x7A5,0x7B2,0x7BF,0x7CC,0x7D9,0x7E6,0x7F3,0x7FF,
};

void sine1()
{
  analogWrite(DAC0, sinTable[i]*amp1);
  i = (i+f_new)%num_samples;
}

void sine2()
{
  analogWrite(DAC0, sinTable[i]*amp2);
  i = (i+f_new)%num_samples;
}

void setup()
{
  analogWriteResolution(12);
  analogReadResolution(12);
  Wire.begin(1);                // join i2c bus with address #1
  Wire.onReceive(receiveEvent); // register event
  Serial.begin(57600);          // start serial for output
  Timer1.attachInterrupt(sine1).setFrequency(num_samples);  // max frequency is around 140.000 samples per second
  Timer2.attachInterrupt(sine2).setFrequency(num_samples);

}

void loop()
{
  delay(100);
  if(received_data)
  {
   Serial.println("So weit, so gut");
   for(i=0;i<50;i++)
   {
    test += data[i];
   }
   Serial.println(test);
   f_new_s = test.substring(indices[0]+3,indices[1]+1);
   f_new = f_new_s.toInt();
   Serial.println(f_new_s);
   amp1_s = test.substring(indices[2]+3,indices[3]+1);
   amp1 = amp1_s.toFloat();
   amp2_s = test.substring(indices[3]+3, indices[4]+1);
   amp2 = amp2_s.toFloat();
   duration_s = test.substring(indices[4]+3,indices[5]+1);
   duration = duration_s.toInt();
   pause_t_s = test.substring(indices[5]+3,indices[6]+1);
   pause_t =  pause_t_s.toInt();

//amp1 = 0.8;
//amp2 = 0.7;
//duration = 500000;
//pause_t = 500000;
//f_new = 10;
  
   Serial.println(amp1);
   Serial.println(amp2);
   Serial.println(duration);
   Serial.println(pause_t);
   //Serial.println(f_new);
  
   Timer1.start();
   delay(duration);
   Timer1.stop();
   delay(pause_t);
  
  // New set for second stimuli
   f_new_s = test.substring(indices[1]+3,indices[2]+1);
   f_new = f_new_s.toInt();
   Serial.println(f_new);
  
   Timer2.start();
   delay(duration);
   Timer2.stop();
   received_data =  false;
   i = 0;
   j = 0;
   k = 0;
   memset(data, 0, sizeof(data));
   test = "";
  }
}

// function that executes whenever data is received from master
// this function is registered as an event, see setup()
void receiveEvent(int howMany)
{
  while(Wire.available() > 0)
  {
  j++;
  data[j] = Wire.read();    // receive byte as a char
  if(data[j] == 240)
  {
    data[j] = 0;
  }
  if(data[j] == 'n')
  {
    indices[k] = j-2;
    k++;
    if(k == 7)
    {
      received_data = true;
    }
   }
  }
}


